def versions = [
        androidPlugin       : "3.5.3",

        kotlin              : "1.4.0",
        androidx            : "1.1.0",
        constraintLayout    : "1.1.3",
        coreKtx             : "1.1.0",
        lifecycleKtx        : "2.2.0",
        fragmentKtx         : "1.2.0",
        viewmodelSavedState : "1.0.0",
        coroutines          : "1.3.3",
        retrofit            : "2.6.4",
        gsonConverter       : "2.6.4",
        okhttp              : "3.12.11",
        timber              : "4.7.1",
        dagger              : "2.27",
        assistedInject      : "0.5.2",
        butterknife         : "10.2.1",
        zoom                : '8.7.0@aar',
        cameraView          : '2.6.1',
        statusbarUtil       : '1.5.1',
        regulaCore          : '5.1.2553@aar',
        regulaApi           : '5.1.2149@aar',
        gifDrawable         : '1.2.19',
        chromeTabs          : '23.3.0',
        chromeTabsHelper    : '2.0.0',

        junit               : "4.12",
        mockitoCore         : "3.3.0",
        mockitoKotlin       : "2.2.0",
        robolectric         : "4.1",
        coroutinesTest      : "1.3.2",
        archCoreTesting     : "2.1.0",
        androidJUnit        : "1.1.1",
        espresso            : "3.2.0",
]

def build = [
        androidPlugin                   : "com.android.tools.build:gradle:${versions.androidPlugin}",
        kotlinPlugin                    : "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
        butterknifePlugin               : "com.jakewharton:butterknife-gradle-plugin:${versions.butterknife}",
]

def buildConfig = [
        buildTools: "29.0.2",
        compileSdk: 29,
        minSdk    : 19,
        targetSdk : 29,
]

def apt = [
        daggerCompiler           : "com.google.dagger:dagger-compiler:${versions.dagger}",
        daggerAndroidProcessor   : "com.google.dagger:dagger-android-processor:${versions.dagger}",
        butterknifeCompiler      : "com.jakewharton:butterknife-compiler:${versions.butterknife}",
        assistedInjectProcessor  : "com.squareup.inject:assisted-inject-processor-dagger2:${versions.assistedInject}",
]

def external = [
        kotlinStdlib      : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
        coroutinesCore    : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}",
        coroutinesAndroid : "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}",
        retrofit          : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
        gsonConverter     : "com.squareup.retrofit2:converter-gson:${versions.gsonConverter}",
        okhttp            : "com.squareup.okhttp3:okhttp:${versions.okhttp}",
        okhttpLogging     : "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
        timber            : "com.jakewharton.timber:timber:${versions.timber}",
        dagger            : "com.google.dagger:dagger:${versions.dagger}",
        daggerAndroid     : "com.google.dagger:dagger-android:${versions.dagger}",
        daggerSuppAndroid : "com.google.dagger:dagger-android-support:${versions.dagger}",
        assistedInject    : "com.squareup.inject:assisted-inject-annotations-dagger2:${versions.assistedInject}",
        butterknife       : "com.jakewharton:butterknife:${versions.butterknife}",
        zoom              : "com.facetec.zoom.sdk:zoom-authentication:${versions.zoom}",
        cameraView        : "com.otaliastudios:cameraview:${versions.cameraView}",
        statusbarUtil     : "com.jaeger.statusbarutil:library:${versions.statusbarUtil}",
        regulaCore        : "com.regula.documentreader.doctype:core:${versions.regulaCore}",
        regulaApi         : "com.regula.documentreader:api:${versions.regulaApi}",
        gifDrawable       : "pl.droidsonroids.gif:android-gif-drawable:${versions.gifDrawable}",
        chromeTabs        : "com.android.support:customtabs:${versions.chromeTabs}",
        chromeTabsHelper  : "saschpe.android:customtabs:${versions.chromeTabsHelper}",
]

def lint = [ ]

def androidx = [
        material                : "com.google.android.material:material:${versions.androidx}",
        annotations             : "androidx.annotation:annotation:${versions.androidx}",
        appCompat               : "androidx.appcompat:appcompat:${versions.androidx}",
        constraintLayout        : "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}",
        coreKtx                 : "androidx.core:core-ktx:${versions.coreKtx}",
        lifecycleKtx            : "androidx.lifecycle:lifecycle-extensions:${versions.lifecycleKtx}",
        livedataKtx             : "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycleKtx}",
        runtimeKtx              : "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycleKtx}",
        viewmodelKtx            : "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleKtx}",
        lifecycleCommonJava8    : "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycleKtx}",
        viewmodelSavedState     : "androidx.lifecycle:lifecycle-viewmodel-savedstate:${versions.viewmodelSavedState}",
        fragmentKtx             : "androidx.fragment:fragment-ktx:${versions.fragmentKtx}",
]

def test = [
        junit                   : "junit:junit:${versions.junit}",
        mokito                  : "org.mockito:mockito-core:${versions.mockitoCore}",
        mokitoKotlin            : "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}",
        robolectric             : "org.robolectric:robolectric:${versions.robolectric}",
        coroutinesTest          : "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutinesTest}",
        archCoreTesting         : "androidx.arch.core:core-testing:${versions.archCoreTesting}",
        androidJUnit            : "androidx.test.ext:junit:${versions.androidJUnit}",
        espresso                : "androidx.test.espresso:espresso-core:${versions.espresso}",
]

ext.config = [
        "build":    buildConfig,
]

ext.deps = [
        "androidx": androidx,
        "apt"     : apt,
        "build"   : build,
        "external": external,
        "lint"    : lint,
        "test"    : test,
        "versions": versions,
]